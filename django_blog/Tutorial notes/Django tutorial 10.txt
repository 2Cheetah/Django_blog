Python Django Tutorial: Full-Featured Web App Part 10 - Create, Update, and Delete Posts
https://youtu.be/-s7e_Fy6NRU

Previously, there were implemented function-based view in blog/views.py and it will be substituted with class-based view. blog/views.py:
from django.shortcuts import render
from django.views.generic import ListView
from .models import Post


def home(request):
    context = {
        'posts': Post.objects.all()
    }
    return render(request, 'blog/home.html', context)


class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'  # <app>/<model>_<viewtype>.html
    context_object_name = 'posts'


def about(request):
    context = {
        'title': 'About Page'
    }
    return render(request, 'blog/about.html', context)

blog/urls.py:
from django.urls import path
from .views import PostListView
from . import views

urlpatterns = [
    path('', PostListView.as_view(), name='blog-home'),
    path('about/', views.about, name='blog-about')
]

---

Posts on the home page are shown in wrong order - oldest on top. To change that behavior it's need to add to PostListView class:
class PostListView(ListView):
    model = Post
    template_name = 'blog/home.html'  # <app>/<model>_<viewtype>.html
    context_object_name = 'posts'
!    ordering = ['-date_posted']  # ['-date_posted'] for newest on top or ['date_posted'] for newest in bottom

---

To see or change Post the best choice is DetailView class. Let's add it to blog/views.py:
from django.views.generic import ListView, DetailView


class PostDetailView(DetailView):
    model = Post

and blog/urls.py with variable to be used in route:
from django.urls import path
from .views import PostListView, PostDetailView
from . import views

urlpatterns = [
    path('', PostListView.as_view(), name='blog-home'),
    path('post/<int:pk>', PostDetailView.as_view(), name='post-detail'),  # pk - primary key, int - integer only
    path('about/', views.about, name='blog-about')
]

---

According to naming convention, post page must be named - blog/post_detail.html (<app>/<model>_<viewtype>.html):
{% extends "blog/base.html" %}
{% block content %}
  <article class="media content-section">
    <img class="rounded-circle article-img" src="{{ object.author.profile.image.url }}">
    <div class="media-body">
      <div class="article-metadata">
        <a class="mr-2" href="#">{{ object.author }}</a>
        <small class="text-muted">{{ object.date_posted|date:'G:i e, d M Y' }}</small>
      </div>
      <h2 class="article-title">{{ object.title }}</h2>
      <p class="article-content">{{ object.content }}</p>
    </div>
  </article>
{% endblock content %}

---

In home.html it'll be needed to modify a tag for post title to lead us to post page:
        <h2><a class="article-title" href="{% url 'post-detail' post.id %}">{{ post.title }}</a></h2>

---

To create new posts it's needed to modify blog/views.py:
from django.views.generic import (
    ListView,
    DetailView,
    CreateView
)
class PostCreateView(CreateView):
    model = Post
    fields = ['title', 'content']

    def form_valid(self, form):
        form.instance.author = self.request.user
        return super().form_valid(form)

---

modify blog/urls.py:
from .views import (
    PostListView,
    PostDetailView,
    PostCreateView
)
urlpatterns = [
    path('', PostListView.as_view(), name='blog-home'),
    path('post/<int:pk>/', PostDetailView.as_view(), name='post-detail'),  # pk - primary key, int - integer only
    path('post/new/', PostCreateView.as_view(), name='post-create'),
    path('about/', views.about, name='blog-about')
]

---

create according to naming convention blog/post_form.html:
{% extends "blog/base.html" %}
{% load crispy_forms_tags %}
{% block content %}
  <div class="content-section">
    <form method="POST">
      {% csrf_token %}
      <fieldset class="form-group">
        <legend class="border-bottom mb-4">Blog post</legend>
        {{ form|crispy }}
      </fieldset>
      <div class="form-group">
        <button class="btn btn-outline-info" type="submit">Post</button>
      </div>
    </form>
  </div>
{% endblock content %}

---

To limit access to post creation page only to logged in users, it's needed to modify blog/views.py:
from django.contrib.auth.mixins import LoginRequiredMixin

class PostCreateView(LoginRequiredMixin, CreateView):

---

To be able to redirect to created post it's needed to modify blog/models.py:
from django.urls import reverse


class Post(models.Model):
    title = models.CharField(max_length=100)
    content = models.TextField()
    date_posted = models.DateTimeField(default=timezone.now)
    author = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('post-detail', kwargs={'pk': self.pk})

---

To update post it's needed to modify views.py, urls.py.

---

To delete a post it's needed to add a class to blog/views.py:
class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Post
    success_url = '/'

    def test_func(self):
        post = self.get_object()
        if self.request.user == post.author:
            return True
        return False

---

Create blog/post_confirm_delete.html:
{% extends "blog/base.html" %}
{% block content %}
  <div class="content-section">
    <form method="POST">
      {% csrf_token %}
      <fieldset class="form-group">
        <legend class="border-bottom mb-4">Delete post</legend>
        <h2>Are you sure you want to delete the post "{{ object.title }}"?</h2>
      </fieldset>
      <div class="form-group">
        <button class="btn btn-outline-danger" type="submit">Yes, Delete</button>
        <a class="btn btn-outline-secondary" href="{% url 'post-detail' object.id %}">Cancel</a>
      </div>
    </form>
  </div>
{% endblock content %}

---

Update blog/urls.py:
urlpatterns = [
    path('', PostListView.as_view(), name='blog-home'),
    path('post/<int:pk>/', PostDetailView.as_view(), name='post-detail'),  # pk - primary key, int - integer only
    path('post/new/', PostCreateView.as_view(), name='post-create'),
    path('post/<int:pk>/update/', PostUpdateView.as_view(), name='post-update'),
    path('post/<int:pk>/delete/', PostDeleteView.as_view(), name='post-delete'),
    path('about/', views.about, name='blog-about')
]